import { Inject, Injectable, LOCALE_ID, NgZone, Optional } from '@angular/core';
import { Observable, of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { GOOGLE_CHARTS_CONFIG } from '../models/injection-tokens.model';
import * as i0 from "@angular/core";
import * as i1 from "../models/injection-tokens.model";
const DEFAULT_CONFIG = {
    mapsApiKey: '',
    version: 'current',
    safeMode: false
};
export class ScriptLoaderService {
    constructor(zone, localeId, config) {
        this.zone = zone;
        this.localeId = localeId;
        this.config = config;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.scriptLoadSubject = new Subject();
        this.config = Object.assign(Object.assign({}, DEFAULT_CONFIG), (config || {}));
    }
    /**
     * Checks whether `google.charts` is available.
     *
     * If not, it can be loaded by calling `loadChartPackages`.
     *
     * @returns `true` if `google.charts` is available, `false` otherwise.
     */
    isGoogleChartsAvailable() {
        if (typeof google === 'undefined' || typeof google.charts === 'undefined') {
            return false;
        }
        return true;
    }
    /**
     * Loads the Google Chart script and the provided chart packages.
     * Can be called multiple times to load more packages.
     *
     * When called without any arguments, this will just load the default package
     * containing the namespaces `google.charts` and `google.visualization` without any charts.
     *
     * @param packages The packages to load.
     * @returns A stream emitting as soon as the chart packages are loaded.
     */
    loadChartPackages(...packages) {
        return this.loadGoogleCharts().pipe(switchMap(() => {
            return new Observable(observer => {
                const config = {
                    packages,
                    language: this.localeId,
                    mapsApiKey: this.config.mapsApiKey,
                    safeMode: this.config.safeMode
                };
                google.charts.load(this.config.version, config);
                google.charts.setOnLoadCallback(() => {
                    this.zone.run(() => {
                        observer.next();
                        observer.complete();
                    });
                });
            });
        }));
    }
    /**
     * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.
     *
     * @returns A stream emitting as soon as loading has completed.
     * If the google charts script is already loaded, the stream emits immediately.
     */
    loadGoogleCharts() {
        if (this.isGoogleChartsAvailable()) {
            return of(null);
        }
        else if (!this.isLoadingGoogleCharts()) {
            const script = this.createGoogleChartsScript();
            script.onload = () => {
                this.zone.run(() => {
                    this.scriptLoadSubject.next();
                    this.scriptLoadSubject.complete();
                });
            };
            script.onerror = () => {
                this.zone.run(() => {
                    console.error('Failed to load the google charts script!');
                    this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));
                });
            };
        }
        return this.scriptLoadSubject.asObservable();
    }
    isLoadingGoogleCharts() {
        return this.getGoogleChartsScript() != null;
    }
    getGoogleChartsScript() {
        const pageScripts = Array.from(document.getElementsByTagName('script'));
        return pageScripts.find(script => script.src === this.scriptSource);
    }
    createGoogleChartsScript() {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    }
}
ScriptLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScriptLoaderService_Factory() { return new ScriptLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.LOCALE_ID), i0.ɵɵinject(i1.GOOGLE_CHARTS_CONFIG, 8)); }, token: ScriptLoaderService, providedIn: "root" });
ScriptLoaderService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ScriptLoaderService.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_CHARTS_CONFIG,] }, { type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWxvYWRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9zY3JpcHQtbG9hZGVyL3NjcmlwdC1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7QUFFeEUsTUFBTSxjQUFjLEdBQXVCO0lBQ3pDLFVBQVUsRUFBRSxFQUFFO0lBQ2QsT0FBTyxFQUFFLFNBQVM7SUFDbEIsUUFBUSxFQUFFLEtBQUs7Q0FDaEIsQ0FBQztBQUdGLE1BQU0sT0FBTyxtQkFBbUI7SUFJOUIsWUFDVSxJQUFZLEVBQ08sUUFBZ0IsRUFDTyxNQUEyQjtRQUZyRSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ08sYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNPLFdBQU0sR0FBTixNQUFNLENBQXFCO1FBTjlELGlCQUFZLEdBQUcsMENBQTBDLENBQUM7UUFDMUQsc0JBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQU92RCxJQUFJLENBQUMsTUFBTSxtQ0FBUSxjQUFjLEdBQUssQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksdUJBQXVCO1FBQzVCLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE9BQU8sTUFBTSxDQUFDLE1BQU0sS0FBSyxXQUFXLEVBQUU7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LE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMvQixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7WUExR0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBYk0sTUFBTTt5Q0FvQnpDLE1BQU0sU0FBQyxTQUFTOzRDQUNoQixNQUFNLFNBQUMsb0JBQW9CLGNBQUcsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgTE9DQUxFX0lELCBOZ1pvbmUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBHb29nbGVDaGFydHNDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvZ29vZ2xlLWNoYXJ0cy1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgR09PR0xFX0NIQVJUU19DT05GSUcgfSBmcm9tICcuLi9tb2RlbHMvaW5qZWN0aW9uLXRva2Vucy5tb2RlbCc7XG5cbmNvbnN0IERFRkFVTFRfQ09ORklHOiBHb29nbGVDaGFydHNDb25maWcgPSB7XG4gIG1hcHNBcGlLZXk6ICcnLFxuICB2ZXJzaW9uOiAnY3VycmVudCcsXG4gIHNhZmVNb2RlOiBmYWxzZVxufTtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBTY3JpcHRMb2FkZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JpcHRTb3VyY2UgPSAnaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vY2hhcnRzL2xvYWRlci5qcyc7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2NyaXB0TG9hZFN1YmplY3QgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgem9uZTogTmdab25lLFxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZUlkOiBzdHJpbmcsXG4gICAgQEluamVjdChHT09HTEVfQ0hBUlRTX0NPTkZJRykgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb25maWc/OiBHb29nbGVDaGFydHNDb25maWdcbiAgKSB7XG4gICAgdGhpcy5jb25maWcgPSB7IC4uLkRFRkFVTFRfQ09ORklHLCAuLi4oY29uZmlnIHx8IHt9KSB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGBnb29nbGUuY2hhcnRzYCBpcyBhdmFpbGFibGUuXG4gICAqXG4gICAqIElmIG5vdCwgaXQgY2FuIGJlIGxvYWRlZCBieSBjYWxsaW5nIGBsb2FkQ2hhcnRQYWNrYWdlc2AuXG4gICAqXG4gICAqIEByZXR1cm5zIGB0cnVlYCBpZiBgZ29vZ2xlLmNoYXJ0c2AgaXMgYXZhaWxhYmxlLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICovXG4gIHB1YmxpYyBpc0dvb2dsZUNoYXJ0c0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIGdvb2dsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGdvb2dsZS5jaGFydHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIEdvb2dsZSBDaGFydCBzY3JpcHQgYW5kIHRoZSBwcm92aWRlZCBjaGFydCBwYWNrYWdlcy5cbiAgICogQ2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB0byBsb2FkIG1vcmUgcGFja2FnZXMuXG4gICAqXG4gICAqIFdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IGFyZ3VtZW50cywgdGhpcyB3aWxsIGp1c3QgbG9hZCB0aGUgZGVmYXVsdCBwYWNrYWdlXG4gICAqIGNvbnRhaW5pbmcgdGhlIG5hbWVzcGFjZXMgYGdvb2dsZS5jaGFydHNgIGFuZCBgZ29vZ2xlLnZpc3VhbGl6YXRpb25gIHdpdGhvdXQgYW55IGNoYXJ0cy5cbiAgICpcbiAgICogQHBhcmFtIHBhY2thZ2VzIFRoZSBwYWNrYWdlcyB0byBsb2FkLlxuICAgKiBAcmV0dXJucyBBIHN0cmVhbSBlbWl0dGluZyBhcyBzb29uIGFzIHRoZSBjaGFydCBwYWNrYWdlcyBhcmUgbG9hZGVkLlxuICAgKi9cbiAgcHVibGljIGxvYWRDaGFydFBhY2thZ2VzKC4uLnBhY2thZ2VzOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmxvYWRHb29nbGVDaGFydHMoKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPHZvaWQ+KG9ic2VydmVyID0+IHtcbiAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBwYWNrYWdlcyxcbiAgICAgICAgICAgIGxhbmd1YWdlOiB0aGlzLmxvY2FsZUlkLFxuICAgICAgICAgICAgbWFwc0FwaUtleTogdGhpcy5jb25maWcubWFwc0FwaUtleSxcbiAgICAgICAgICAgIHNhZmVNb2RlOiB0aGlzLmNvbmZpZy5zYWZlTW9kZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBnb29nbGUuY2hhcnRzLmxvYWQodGhpcy5jb25maWcudmVyc2lvbiwgY29uZmlnKTtcbiAgICAgICAgICBnb29nbGUuY2hhcnRzLnNldE9uTG9hZENhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KCk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIEdvb2dsZSBDaGFydHMgc2NyaXB0LiBBZnRlciB0aGUgc2NyaXB0IGlzIGxvYWRlZCwgYGdvb2dsZS5jaGFydHNgIGlzIGRlZmluZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgc3RyZWFtIGVtaXR0aW5nIGFzIHNvb24gYXMgbG9hZGluZyBoYXMgY29tcGxldGVkLlxuICAgKiBJZiB0aGUgZ29vZ2xlIGNoYXJ0cyBzY3JpcHQgaXMgYWxyZWFkeSBsb2FkZWQsIHRoZSBzdHJlYW0gZW1pdHMgaW1tZWRpYXRlbHkuXG4gICAqL1xuICBwcml2YXRlIGxvYWRHb29nbGVDaGFydHMoKSB7XG4gICAgaWYgKHRoaXMuaXNHb29nbGVDaGFydHNBdmFpbGFibGUoKSkge1xuICAgICAgcmV0dXJuIG9mKG51bGwpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNMb2FkaW5nR29vZ2xlQ2hhcnRzKCkpIHtcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuY3JlYXRlR29vZ2xlQ2hhcnRzU2NyaXB0KCk7XG4gICAgICBzY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNjcmlwdExvYWRTdWJqZWN0Lm5leHQoKTtcbiAgICAgICAgICB0aGlzLnNjcmlwdExvYWRTdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHRoZSBnb29nbGUgY2hhcnRzIHNjcmlwdCEnKTtcbiAgICAgICAgICB0aGlzLnNjcmlwdExvYWRTdWJqZWN0LmVycm9yKG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgdGhlIGdvb2dsZSBjaGFydHMgc2NyaXB0IScpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNjcmlwdExvYWRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0xvYWRpbmdHb29nbGVDaGFydHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0R29vZ2xlQ2hhcnRzU2NyaXB0KCkgIT0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R29vZ2xlQ2hhcnRzU2NyaXB0KCk6IEhUTUxTY3JpcHRFbGVtZW50IHwgbnVsbCB7XG4gICAgY29uc3QgcGFnZVNjcmlwdHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKSk7XG4gICAgcmV0dXJuIHBhZ2VTY3JpcHRzLmZpbmQoc2NyaXB0ID0+IHNjcmlwdC5zcmMgPT09IHRoaXMuc2NyaXB0U291cmNlKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlR29vZ2xlQ2hhcnRzU2NyaXB0KCk6IEhUTUxTY3JpcHRFbGVtZW50IHtcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSB0aGlzLnNjcmlwdFNvdXJjZTtcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICByZXR1cm4gc2NyaXB0O1xuICB9XG59XG4iXX0=